// Code generated by MockGen. DO NOT EDIT.
// Source: ./debouncer.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDebouncer is a mock of Debouncer interface.
type MockDebouncer struct {
	ctrl     *gomock.Controller
	recorder *MockDebouncerMockRecorder
}

// MockDebouncerMockRecorder is the mock recorder for MockDebouncer.
type MockDebouncerMockRecorder struct {
	mock *MockDebouncer
}

// NewMockDebouncer creates a new mock instance.
func NewMockDebouncer(ctrl *gomock.Controller) *MockDebouncer {
	mock := &MockDebouncer{ctrl: ctrl}
	mock.recorder = &MockDebouncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDebouncer) EXPECT() *MockDebouncerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDebouncer) Add(res string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", res)
}

// Add indicates an expected call of Add.
func (mr *MockDebouncerMockRecorder) Add(res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDebouncer)(nil).Add), res)
}

// Start mocks base method.
func (m *MockDebouncer) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockDebouncerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDebouncer)(nil).Start))
}
