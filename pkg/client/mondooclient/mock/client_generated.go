// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "go.mondoo.com/mondoo-operator/pkg/client/common"
	mondooclient "go.mondoo.com/mondoo-operator/pkg/client/mondooclient"
)

// MockMondooClient is a mock of MondooClient interface.
type MockMondooClient struct {
	ctrl     *gomock.Controller
	recorder *MockMondooClientMockRecorder
}

// MockMondooClientMockRecorder is the mock recorder for MockMondooClient.
type MockMondooClientMockRecorder struct {
	mock *MockMondooClient
}

// NewMockMondooClient creates a new mock instance.
func NewMockMondooClient(ctrl *gomock.Controller) *MockMondooClient {
	mock := &MockMondooClient{ctrl: ctrl}
	mock.recorder = &MockMondooClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMondooClient) EXPECT() *MockMondooClientMockRecorder {
	return m.recorder
}

// ExchangeRegistrationToken mocks base method.
func (m *MockMondooClient) ExchangeRegistrationToken(arg0 context.Context, arg1 *mondooclient.ExchangeRegistrationTokenInput) (*mondooclient.ExchangeRegistrationTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeRegistrationToken", arg0, arg1)
	ret0, _ := ret[0].(*mondooclient.ExchangeRegistrationTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeRegistrationToken indicates an expected call of ExchangeRegistrationToken.
func (mr *MockMondooClientMockRecorder) ExchangeRegistrationToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeRegistrationToken", reflect.TypeOf((*MockMondooClient)(nil).ExchangeRegistrationToken), arg0, arg1)
}

// HealthCheck mocks base method.
func (m *MockMondooClient) HealthCheck(arg0 context.Context, arg1 *common.HealthCheckRequest) (*common.HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", arg0, arg1)
	ret0, _ := ret[0].(*common.HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockMondooClientMockRecorder) HealthCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockMondooClient)(nil).HealthCheck), arg0, arg1)
}

// IntegrationCheckIn mocks base method.
func (m *MockMondooClient) IntegrationCheckIn(arg0 context.Context, arg1 *mondooclient.IntegrationCheckInInput) (*mondooclient.IntegrationCheckInOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntegrationCheckIn", arg0, arg1)
	ret0, _ := ret[0].(*mondooclient.IntegrationCheckInOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntegrationCheckIn indicates an expected call of IntegrationCheckIn.
func (mr *MockMondooClientMockRecorder) IntegrationCheckIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntegrationCheckIn", reflect.TypeOf((*MockMondooClient)(nil).IntegrationCheckIn), arg0, arg1)
}

// IntegrationRegister mocks base method.
func (m *MockMondooClient) IntegrationRegister(arg0 context.Context, arg1 *mondooclient.IntegrationRegisterInput) (*mondooclient.IntegrationRegisterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntegrationRegister", arg0, arg1)
	ret0, _ := ret[0].(*mondooclient.IntegrationRegisterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntegrationRegister indicates an expected call of IntegrationRegister.
func (mr *MockMondooClientMockRecorder) IntegrationRegister(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntegrationRegister", reflect.TypeOf((*MockMondooClient)(nil).IntegrationRegister), arg0, arg1)
}

// IntegrationReportStatus mocks base method.
func (m *MockMondooClient) IntegrationReportStatus(arg0 context.Context, arg1 *mondooclient.ReportStatusRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntegrationReportStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IntegrationReportStatus indicates an expected call of IntegrationReportStatus.
func (mr *MockMondooClientMockRecorder) IntegrationReportStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntegrationReportStatus", reflect.TypeOf((*MockMondooClient)(nil).IntegrationReportStatus), arg0, arg1)
}
