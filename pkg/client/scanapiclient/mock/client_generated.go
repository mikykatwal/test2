// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	scan "go.mondoo.com/cnspec/v11/policy/scan"
	common "go.mondoo.com/mondoo-operator/pkg/client/common"
	scanapiclient "go.mondoo.com/mondoo-operator/pkg/client/scanapiclient"
)

// MockScanApiClient is a mock of ScanApiClient interface.
type MockScanApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockScanApiClientMockRecorder
}

// MockScanApiClientMockRecorder is the mock recorder for MockScanApiClient.
type MockScanApiClientMockRecorder struct {
	mock *MockScanApiClient
}

// NewMockScanApiClient creates a new mock instance.
func NewMockScanApiClient(ctrl *gomock.Controller) *MockScanApiClient {
	mock := &MockScanApiClient{ctrl: ctrl}
	mock.recorder = &MockScanApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanApiClient) EXPECT() *MockScanApiClientMockRecorder {
	return m.recorder
}

// GarbageCollectAssets mocks base method.
func (m *MockScanApiClient) GarbageCollectAssets(arg0 context.Context, arg1 *scan.GarbageCollectOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GarbageCollectAssets", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GarbageCollectAssets indicates an expected call of GarbageCollectAssets.
func (mr *MockScanApiClientMockRecorder) GarbageCollectAssets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GarbageCollectAssets", reflect.TypeOf((*MockScanApiClient)(nil).GarbageCollectAssets), arg0, arg1)
}

// HealthCheck mocks base method.
func (m *MockScanApiClient) HealthCheck(arg0 context.Context, arg1 *common.HealthCheckRequest) (*common.HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", arg0, arg1)
	ret0, _ := ret[0].(*common.HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockScanApiClientMockRecorder) HealthCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockScanApiClient)(nil).HealthCheck), arg0, arg1)
}

// RunAdmissionReview mocks base method.
func (m *MockScanApiClient) RunAdmissionReview(arg0 context.Context, arg1 *scanapiclient.AdmissionReviewJob) (*scanapiclient.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAdmissionReview", arg0, arg1)
	ret0, _ := ret[0].(*scanapiclient.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunAdmissionReview indicates an expected call of RunAdmissionReview.
func (mr *MockScanApiClientMockRecorder) RunAdmissionReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAdmissionReview", reflect.TypeOf((*MockScanApiClient)(nil).RunAdmissionReview), arg0, arg1)
}

// ScanKubernetesResources mocks base method.
func (m *MockScanApiClient) ScanKubernetesResources(ctx context.Context, scanOpts *scanapiclient.ScanKubernetesResourcesOpts) (*scanapiclient.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanKubernetesResources", ctx, scanOpts)
	ret0, _ := ret[0].(*scanapiclient.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanKubernetesResources indicates an expected call of ScanKubernetesResources.
func (mr *MockScanApiClientMockRecorder) ScanKubernetesResources(ctx, scanOpts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanKubernetesResources", reflect.TypeOf((*MockScanApiClient)(nil).ScanKubernetesResources), ctx, scanOpts)
}

// ScheduleKubernetesResourceScan mocks base method.
func (m *MockScanApiClient) ScheduleKubernetesResourceScan(ctx context.Context, integrationMrn, resourceKey, managedBy string) (*scanapiclient.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleKubernetesResourceScan", ctx, integrationMrn, resourceKey, managedBy)
	ret0, _ := ret[0].(*scanapiclient.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleKubernetesResourceScan indicates an expected call of ScheduleKubernetesResourceScan.
func (mr *MockScanApiClientMockRecorder) ScheduleKubernetesResourceScan(ctx, integrationMrn, resourceKey, managedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleKubernetesResourceScan", reflect.TypeOf((*MockScanApiClient)(nil).ScheduleKubernetesResourceScan), ctx, integrationMrn, resourceKey, managedBy)
}
