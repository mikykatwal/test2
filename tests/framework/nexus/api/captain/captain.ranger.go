// Code generated by protoc-gen-rangerrpc version DO NOT EDIT.
// source: captain.proto

package captain

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	ranger "go.mondoo.com/ranger-rpc"
	"go.mondoo.com/ranger-rpc/metadata"
	jsonpb "google.golang.org/protobuf/encoding/protojson"
	pb "google.golang.org/protobuf/proto"
)

// service interface definition

type Captain interface {
	CreateSpace(context.Context, *CreateSpaceRequest) (*Space, error)
	GetSpace(context.Context, *ID) (*Space, error)
	ListSpaces(context.Context, *SpacesQuery) (*SpacesPage, error)
	DeleteSpace(context.Context, *ID) (*Empty, error)
}

// client implementation

type CaptainClient struct {
	ranger.Client
	httpclient ranger.HTTPClient
	prefix     string
}

func NewCaptainClient(addr string, client ranger.HTTPClient, plugins ...ranger.ClientPlugin) (*CaptainClient, error) {
	base, err := url.Parse(ranger.SanitizeUrl(addr))
	if err != nil {
		return nil, err
	}

	u, err := url.Parse("./Captain")
	if err != nil {
		return nil, err
	}

	serviceClient := &CaptainClient{
		httpclient: client,
		prefix:     base.ResolveReference(u).String(),
	}
	serviceClient.AddPlugins(plugins...)
	return serviceClient, nil
}
func (c *CaptainClient) CreateSpace(ctx context.Context, in *CreateSpaceRequest) (*Space, error) {
	out := new(Space)
	err := c.DoClientRequest(ctx, c.httpclient, strings.Join([]string{c.prefix, "/CreateSpace"}, ""), in, out)
	return out, err
}
func (c *CaptainClient) GetSpace(ctx context.Context, in *ID) (*Space, error) {
	out := new(Space)
	err := c.DoClientRequest(ctx, c.httpclient, strings.Join([]string{c.prefix, "/GetSpace"}, ""), in, out)
	return out, err
}
func (c *CaptainClient) ListSpaces(ctx context.Context, in *SpacesQuery) (*SpacesPage, error) {
	out := new(SpacesPage)
	err := c.DoClientRequest(ctx, c.httpclient, strings.Join([]string{c.prefix, "/ListSpaces"}, ""), in, out)
	return out, err
}
func (c *CaptainClient) DeleteSpace(ctx context.Context, in *ID) (*Empty, error) {
	out := new(Empty)
	err := c.DoClientRequest(ctx, c.httpclient, strings.Join([]string{c.prefix, "/DeleteSpace"}, ""), in, out)
	return out, err
}

// server implementation

type CaptainServerOption func(s *CaptainServer)

func WithUnknownFieldsForCaptainServer() CaptainServerOption {
	return func(s *CaptainServer) {
		s.allowUnknownFields = true
	}
}

func NewCaptainServer(handler Captain, opts ...CaptainServerOption) http.Handler {
	srv := &CaptainServer{
		handler: handler,
	}

	for i := range opts {
		opts[i](srv)
	}

	service := ranger.Service{
		Name: "Captain",
		Methods: map[string]ranger.Method{
			"CreateSpace": srv.CreateSpace,
			"GetSpace":    srv.GetSpace,
			"ListSpaces":  srv.ListSpaces,
			"DeleteSpace": srv.DeleteSpace,
		},
	}
	return ranger.NewRPCServer(&service)
}

type CaptainServer struct {
	handler            Captain
	allowUnknownFields bool
}

func (p *CaptainServer) CreateSpace(ctx context.Context, reqBytes *[]byte) (pb.Message, error) {
	var req CreateSpaceRequest
	var err error

	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.New("could not access header")
	}

	switch md.First("Content-Type") {
	case "application/protobuf", "application/octet-stream", "application/grpc+proto":
		err = pb.Unmarshal(*reqBytes, &req)
	default:
		// handle case of empty object
		if len(*reqBytes) > 0 {
			err = jsonpb.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(*reqBytes, &req)
		}
	}

	if err != nil {
		return nil, err
	}
	return p.handler.CreateSpace(ctx, &req)
}
func (p *CaptainServer) GetSpace(ctx context.Context, reqBytes *[]byte) (pb.Message, error) {
	var req ID
	var err error

	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.New("could not access header")
	}

	switch md.First("Content-Type") {
	case "application/protobuf", "application/octet-stream", "application/grpc+proto":
		err = pb.Unmarshal(*reqBytes, &req)
	default:
		// handle case of empty object
		if len(*reqBytes) > 0 {
			err = jsonpb.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(*reqBytes, &req)
		}
	}

	if err != nil {
		return nil, err
	}
	return p.handler.GetSpace(ctx, &req)
}
func (p *CaptainServer) ListSpaces(ctx context.Context, reqBytes *[]byte) (pb.Message, error) {
	var req SpacesQuery
	var err error

	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.New("could not access header")
	}

	switch md.First("Content-Type") {
	case "application/protobuf", "application/octet-stream", "application/grpc+proto":
		err = pb.Unmarshal(*reqBytes, &req)
	default:
		// handle case of empty object
		if len(*reqBytes) > 0 {
			err = jsonpb.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(*reqBytes, &req)
		}
	}

	if err != nil {
		return nil, err
	}
	return p.handler.ListSpaces(ctx, &req)
}
func (p *CaptainServer) DeleteSpace(ctx context.Context, reqBytes *[]byte) (pb.Message, error) {
	var req ID
	var err error

	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.New("could not access header")
	}

	switch md.First("Content-Type") {
	case "application/protobuf", "application/octet-stream", "application/grpc+proto":
		err = pb.Unmarshal(*reqBytes, &req)
	default:
		// handle case of empty object
		if len(*reqBytes) > 0 {
			err = jsonpb.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(*reqBytes, &req)
		}
	}

	if err != nil {
		return nil, err
	}
	return p.handler.DeleteSpace(ctx, &req)
}
