// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: integrations.proto

package integrations

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_UNKNOWN Type = 0
	Type_AWS     Type = 1
	Type_K8S     Type = 2
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "AWS",
		2: "K8S",
	}
	Type_value = map[string]int32{
		"UNKNOWN": 0,
		"AWS":     1,
		"K8S":     2,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_integrations_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_integrations_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{0}
}

type Status int32

const (
	Status_NOT_READY         Status = 0
	Status_WAITING_FOR_SETUP Status = 1
	Status_ACTIVE            Status = 2
	Status_ERROR             Status = 3
	Status_DELETED           Status = 4
	Status_MISSING           Status = 5
	Status_WARNING           Status = 6
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "NOT_READY",
		1: "WAITING_FOR_SETUP",
		2: "ACTIVE",
		3: "ERROR",
		4: "DELETED",
		5: "MISSING",
		6: "WARNING",
	}
	Status_value = map[string]int32{
		"NOT_READY":         0,
		"WAITING_FOR_SETUP": 1,
		"ACTIVE":            2,
		"ERROR":             3,
		"DELETED":           4,
		"MISSING":           5,
		"WARNING":           6,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_integrations_proto_enumTypes[1].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_integrations_proto_enumTypes[1]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{1}
}

type MessageStatus int32

const (
	MessageStatus_MESSAGE_UNKNOWN MessageStatus = 0
	MessageStatus_MESSAGE_WARNING MessageStatus = 1
	MessageStatus_MESSAGE_ERROR   MessageStatus = 2
	MessageStatus_MESSAGE_INFO    MessageStatus = 3
)

// Enum value maps for MessageStatus.
var (
	MessageStatus_name = map[int32]string{
		0: "MESSAGE_UNKNOWN",
		1: "MESSAGE_WARNING",
		2: "MESSAGE_ERROR",
		3: "MESSAGE_INFO",
	}
	MessageStatus_value = map[string]int32{
		"MESSAGE_UNKNOWN": 0,
		"MESSAGE_WARNING": 1,
		"MESSAGE_ERROR":   2,
		"MESSAGE_INFO":    3,
	}
)

func (x MessageStatus) Enum() *MessageStatus {
	p := new(MessageStatus)
	*p = x
	return p
}

func (x MessageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_integrations_proto_enumTypes[2].Descriptor()
}

func (MessageStatus) Type() protoreflect.EnumType {
	return &file_integrations_proto_enumTypes[2]
}

func (x MessageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageStatus.Descriptor instead.
func (MessageStatus) EnumDescriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{2}
}

type ScanType int32

const (
	ScanType_ALL     ScanType = 0
	ScanType_ACCOUNT ScanType = 1
	ScanType_EC2     ScanType = 2
	ScanType_ECR     ScanType = 3
	ScanType_EBS     ScanType = 4
)

// Enum value maps for ScanType.
var (
	ScanType_name = map[int32]string{
		0: "ALL",
		1: "ACCOUNT",
		2: "EC2",
		3: "ECR",
		4: "EBS",
	}
	ScanType_value = map[string]int32{
		"ALL":     0,
		"ACCOUNT": 1,
		"EC2":     2,
		"ECR":     3,
		"EBS":     4,
	}
)

func (x ScanType) Enum() *ScanType {
	p := new(ScanType)
	*p = x
	return p
}

func (x ScanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanType) Descriptor() protoreflect.EnumDescriptor {
	return file_integrations_proto_enumTypes[3].Descriptor()
}

func (ScanType) Type() protoreflect.EnumType {
	return &file_integrations_proto_enumTypes[3]
}

func (x ScanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanType.Descriptor instead.
func (ScanType) EnumDescriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{3}
}

type VaultType int32

const (
	VaultType_AWS_SECRETS_MANAGER VaultType = 0
	VaultType_AWS_PARAMETER_STORE VaultType = 1
)

// Enum value maps for VaultType.
var (
	VaultType_name = map[int32]string{
		0: "AWS_SECRETS_MANAGER",
		1: "AWS_PARAMETER_STORE",
	}
	VaultType_value = map[string]int32{
		"AWS_SECRETS_MANAGER": 0,
		"AWS_PARAMETER_STORE": 1,
	}
)

func (x VaultType) Enum() *VaultType {
	p := new(VaultType)
	*p = x
	return p
}

func (x VaultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VaultType) Descriptor() protoreflect.EnumDescriptor {
	return file_integrations_proto_enumTypes[4].Descriptor()
}

func (VaultType) Type() protoreflect.EnumType {
	return &file_integrations_proto_enumTypes[4]
}

func (x VaultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VaultType.Descriptor instead.
func (VaultType) EnumDescriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{4}
}

type DeleteIntegrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn string `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
}

func (x *DeleteIntegrationRequest) Reset() {
	*x = DeleteIntegrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIntegrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIntegrationRequest) ProtoMessage() {}

func (x *DeleteIntegrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIntegrationRequest.ProtoReflect.Descriptor instead.
func (*DeleteIntegrationRequest) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{0}
}

func (x *DeleteIntegrationRequest) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

type DeleteIntegrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteIntegrationResponse) Reset() {
	*x = DeleteIntegrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIntegrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIntegrationResponse) ProtoMessage() {}

func (x *DeleteIntegrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIntegrationResponse.ProtoReflect.Descriptor instead.
func (*DeleteIntegrationResponse) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{1}
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceMrn string `protobuf:"bytes,1,opt,name=spaceMrn,proto3" json:"spaceMrn,omitempty"`
	Type     Type   `protobuf:"varint,2,opt,name=type,proto3,enum=mondoo.integrations.v1.Type" json:"type,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{2}
}

func (x *Query) GetSpaceMrn() string {
	if x != nil {
		return x.SpaceMrn
	}
	return ""
}

func (x *Query) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_UNKNOWN
}

type CreateIntegrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceMrn string `protobuf:"bytes,1,opt,name=space_mrn,json=spaceMrn,proto3" json:"space_mrn,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// optional, source identifiers for the integration (e.g. AWS account id)
	Identifiers        []string            `protobuf:"bytes,3,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	ConfigurationInput *ConfigurationInput `protobuf:"bytes,4,opt,name=configuration_input,json=configurationInput,proto3" json:"configuration_input,omitempty"`
	Labels             map[string]string   `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Type               Type                `protobuf:"varint,6,opt,name=type,proto3,enum=mondoo.integrations.v1.Type" json:"type,omitempty"`
	LongLivedToken     bool                `protobuf:"varint,7,opt,name=long_lived_token,json=longLivedToken,proto3" json:"long_lived_token,omitempty"`
}

func (x *CreateIntegrationRequest) Reset() {
	*x = CreateIntegrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIntegrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIntegrationRequest) ProtoMessage() {}

func (x *CreateIntegrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIntegrationRequest.ProtoReflect.Descriptor instead.
func (*CreateIntegrationRequest) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{3}
}

func (x *CreateIntegrationRequest) GetSpaceMrn() string {
	if x != nil {
		return x.SpaceMrn
	}
	return ""
}

func (x *CreateIntegrationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateIntegrationRequest) GetIdentifiers() []string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *CreateIntegrationRequest) GetConfigurationInput() *ConfigurationInput {
	if x != nil {
		return x.ConfigurationInput
	}
	return nil
}

func (x *CreateIntegrationRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateIntegrationRequest) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_UNKNOWN
}

func (x *CreateIntegrationRequest) GetLongLivedToken() bool {
	if x != nil {
		return x.LongLivedToken
	}
	return false
}

type CreateIntegrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Integration *Integration `protobuf:"bytes,1,opt,name=integration,proto3" json:"integration,omitempty"`
}

func (x *CreateIntegrationResponse) Reset() {
	*x = CreateIntegrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIntegrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIntegrationResponse) ProtoMessage() {}

func (x *CreateIntegrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIntegrationResponse.ProtoReflect.Descriptor instead.
func (*CreateIntegrationResponse) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{4}
}

func (x *CreateIntegrationResponse) GetIntegration() *Integration {
	if x != nil {
		return x.Integration
	}
	return nil
}

type UpdateIntegrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Integration *Integration `protobuf:"bytes,1,opt,name=integration,proto3" json:"integration,omitempty"`
}

func (x *UpdateIntegrationResponse) Reset() {
	*x = UpdateIntegrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIntegrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIntegrationResponse) ProtoMessage() {}

func (x *UpdateIntegrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIntegrationResponse.ProtoReflect.Descriptor instead.
func (*UpdateIntegrationResponse) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateIntegrationResponse) GetIntegration() *Integration {
	if x != nil {
		return x.Integration
	}
	return nil
}

type Integrations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Integrations []*Integration `protobuf:"bytes,1,rep,name=integrations,proto3" json:"integrations,omitempty"`
}

func (x *Integrations) Reset() {
	*x = Integrations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integrations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integrations) ProtoMessage() {}

func (x *Integrations) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integrations.ProtoReflect.Descriptor instead.
func (*Integrations) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{6}
}

func (x *Integrations) GetIntegrations() []*Integration {
	if x != nil {
		return x.Integrations
	}
	return nil
}

type Integration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn string `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
	// user selected name for the integration (display name)
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status       Status `protobuf:"varint,3,opt,name=status,proto3,enum=mondoo.integrations.v1.Status" json:"status,omitempty"`
	CreatedAt    string `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastModified string `protobuf:"bytes,5,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	// scan configuration options for the integration
	Configuration *Configuration `protobuf:"bytes,6,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// the error object reported to the integration
	// FIXME: deprecated - this can be removed and replaced by IntegrationMessages.
	Error *structpb.Struct `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
	// time of last checkin from integration client
	LastCheckin string `protobuf:"bytes,8,opt,name=last_checkin,json=lastCheckin,proto3" json:"last_checkin,omitempty"`
	// token associated with the integration
	Token string `protobuf:"bytes,9,opt,name=token,proto3" json:"token,omitempty"`
	// optional, source identifiers for the integration, e.g. a list of AWS account ids
	Identifiers []string          `protobuf:"bytes,10,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	Labels      map[string]string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// enum for the integration type: AWS, K8s, etc
	Type     Type   `protobuf:"varint,12,opt,name=type,proto3,enum=mondoo.integrations.v1.Type" json:"type,omitempty"`
	SpaceMrn string `protobuf:"bytes,13,opt,name=space_mrn,json=spaceMrn,proto3" json:"space_mrn,omitempty"`
	// messages that convey extra information about the integration - these messages can be informational, warnings or errors.
	Messages *IntegrationMessages `protobuf:"bytes,14,opt,name=messages,proto3" json:"messages,omitempty"`
	// mrn of the user that created the integration
	CreatedBy string `protobuf:"bytes,15,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
}

func (x *Integration) Reset() {
	*x = Integration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integration) ProtoMessage() {}

func (x *Integration) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integration.ProtoReflect.Descriptor instead.
func (*Integration) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{7}
}

func (x *Integration) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *Integration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Integration) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_NOT_READY
}

func (x *Integration) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Integration) GetLastModified() string {
	if x != nil {
		return x.LastModified
	}
	return ""
}

func (x *Integration) GetConfiguration() *Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *Integration) GetError() *structpb.Struct {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Integration) GetLastCheckin() string {
	if x != nil {
		return x.LastCheckin
	}
	return ""
}

func (x *Integration) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Integration) GetIdentifiers() []string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *Integration) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Integration) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_UNKNOWN
}

func (x *Integration) GetSpaceMrn() string {
	if x != nil {
		return x.SpaceMrn
	}
	return ""
}

func (x *Integration) GetMessages() *IntegrationMessages {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *Integration) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type IntegrationMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*IntegrationMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *IntegrationMessages) Reset() {
	*x = IntegrationMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationMessages) ProtoMessage() {}

func (x *IntegrationMessages) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationMessages.ProtoReflect.Descriptor instead.
func (*IntegrationMessages) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{8}
}

func (x *IntegrationMessages) GetMessages() []*IntegrationMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type IntegrationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message         string        `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp       string        `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Status          MessageStatus `protobuf:"varint,3,opt,name=status,proto3,enum=mondoo.integrations.v1.MessageStatus" json:"status,omitempty"`
	ReportedByAgent bool          `protobuf:"varint,4,opt,name=reported_by_agent,json=reportedByAgent,proto3" json:"reported_by_agent,omitempty"`
	Identifier      string        `protobuf:"bytes,5,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Anything extra that the message might contain.
	Extra *structpb.Struct `protobuf:"bytes,6,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *IntegrationMessage) Reset() {
	*x = IntegrationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationMessage) ProtoMessage() {}

func (x *IntegrationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationMessage.ProtoReflect.Descriptor instead.
func (*IntegrationMessage) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{9}
}

func (x *IntegrationMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *IntegrationMessage) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *IntegrationMessage) GetStatus() MessageStatus {
	if x != nil {
		return x.Status
	}
	return MessageStatus_MESSAGE_UNKNOWN
}

func (x *IntegrationMessage) GetReportedByAgent() bool {
	if x != nil {
		return x.ReportedByAgent
	}
	return false
}

func (x *IntegrationMessage) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *IntegrationMessage) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetIntegrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn string `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
}

func (x *GetIntegrationRequest) Reset() {
	*x = GetIntegrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntegrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntegrationRequest) ProtoMessage() {}

func (x *GetIntegrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntegrationRequest.ProtoReflect.Descriptor instead.
func (*GetIntegrationRequest) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{10}
}

func (x *GetIntegrationRequest) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

type GetTokenForIntegrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn            string `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
	LongLivedToken bool   `protobuf:"varint,7,opt,name=long_lived_token,json=longLivedToken,proto3" json:"long_lived_token,omitempty"`
}

func (x *GetTokenForIntegrationRequest) Reset() {
	*x = GetTokenForIntegrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenForIntegrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenForIntegrationRequest) ProtoMessage() {}

func (x *GetTokenForIntegrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenForIntegrationRequest.ProtoReflect.Descriptor instead.
func (*GetTokenForIntegrationRequest) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{11}
}

func (x *GetTokenForIntegrationRequest) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *GetTokenForIntegrationRequest) GetLongLivedToken() bool {
	if x != nil {
		return x.LongLivedToken
	}
	return false
}

type GetTokenForIntegrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetTokenForIntegrationResponse) Reset() {
	*x = GetTokenForIntegrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenForIntegrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenForIntegrationResponse) ProtoMessage() {}

func (x *GetTokenForIntegrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenForIntegrationResponse.ProtoReflect.Descriptor instead.
func (*GetTokenForIntegrationResponse) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{12}
}

func (x *GetTokenForIntegrationResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn string `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
}

func (x *GetNameRequest) Reset() {
	*x = GetNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNameRequest) ProtoMessage() {}

func (x *GetNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNameRequest.ProtoReflect.Descriptor instead.
func (*GetNameRequest) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{13}
}

func (x *GetNameRequest) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

type GetNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetNameResponse) Reset() {
	*x = GetNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNameResponse) ProtoMessage() {}

func (x *GetNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNameResponse.ProtoReflect.Descriptor instead.
func (*GetNameResponse) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{14}
}

func (x *GetNameResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateIntegrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn  string `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// optional, source identifiers for the integration (e.g. AWS account id)
	Identifiers        []string            `protobuf:"bytes,3,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	ConfigurationInput *ConfigurationInput `protobuf:"bytes,4,opt,name=configuration_input,json=configurationInput,proto3" json:"configuration_input,omitempty"`
	Labels             map[string]string   `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateIntegrationRequest) Reset() {
	*x = UpdateIntegrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIntegrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIntegrationRequest) ProtoMessage() {}

func (x *UpdateIntegrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIntegrationRequest.ProtoReflect.Descriptor instead.
func (*UpdateIntegrationRequest) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateIntegrationRequest) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *UpdateIntegrationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateIntegrationRequest) GetIdentifiers() []string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *UpdateIntegrationRequest) GetConfigurationInput() *ConfigurationInput {
	if x != nil {
		return x.ConfigurationInput
	}
	return nil
}

func (x *UpdateIntegrationRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// options for the configuration. these are usually scan configuration options,
	// and they are added on integration create/updated with the integration update call
	// e.g. the struct representation of the object that says { scan_nodes: true, scan_workloads: false }
	// FIXME: can be replaced by config_options that provide more precise API spec.
	Options *structpb.Struct `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	// any kind of configuration state or other information about the integration.
	// stored so it can be displayed to the user as needed
	State *structpb.Struct `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	// the different integration option types. these can be used in place of 'options' to provide API safety and stability.
	// the options field can still be used in the future for exploratory/unstable integrations if needed.
	//
	// Types that are assignable to ConfigOptions:
	//
	//	*Configuration_AwsOptions
	//	*Configuration_K8SOptions
	ConfigOptions isConfiguration_ConfigOptions `protobuf_oneof:"config_options"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{16}
}

func (x *Configuration) GetOptions() *structpb.Struct {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Configuration) GetState() *structpb.Struct {
	if x != nil {
		return x.State
	}
	return nil
}

func (m *Configuration) GetConfigOptions() isConfiguration_ConfigOptions {
	if m != nil {
		return m.ConfigOptions
	}
	return nil
}

func (x *Configuration) GetAwsOptions() *AwsConfigurationOptions {
	if x, ok := x.GetConfigOptions().(*Configuration_AwsOptions); ok {
		return x.AwsOptions
	}
	return nil
}

func (x *Configuration) GetK8SOptions() *K8SConfigurationOptions {
	if x, ok := x.GetConfigOptions().(*Configuration_K8SOptions); ok {
		return x.K8SOptions
	}
	return nil
}

type isConfiguration_ConfigOptions interface {
	isConfiguration_ConfigOptions()
}

type Configuration_AwsOptions struct {
	AwsOptions *AwsConfigurationOptions `protobuf:"bytes,3,opt,name=aws_options,json=awsOptions,proto3,oneof"`
}

type Configuration_K8SOptions struct {
	K8SOptions *K8SConfigurationOptions `protobuf:"bytes,4,opt,name=k8s_options,json=k8sOptions,proto3,oneof"`
}

func (*Configuration_AwsOptions) isConfiguration_ConfigOptions() {}

func (*Configuration_K8SOptions) isConfiguration_ConfigOptions() {}

type ConfigurationInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// options for the configuration. these are usually scan configuration options,
	// and they are added on integration create/updated with the integration update call
	// e.g. the struct representation of the object that says { scan_nodes: true, scan_workloads: false }
	// FIXME: can be replaced by config_options that provide more precise API spec.
	Options *structpb.Struct `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"` // any kind of configuration state or other information about the integration.
	// stored so it can be displayed to the user as needed
	State *structpb.Struct `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	// the different integration option types. these can be used in place of 'options' to provide API safety and stability.
	// the options field can still be used in the future for exploratory/unstable integrations if needed.
	//
	// Types that are assignable to ConfigOptions:
	//
	//	*ConfigurationInput_AwsOptions
	//	*ConfigurationInput_K8SOptions
	ConfigOptions isConfigurationInput_ConfigOptions `protobuf_oneof:"config_options"`
}

func (x *ConfigurationInput) Reset() {
	*x = ConfigurationInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationInput) ProtoMessage() {}

func (x *ConfigurationInput) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationInput.ProtoReflect.Descriptor instead.
func (*ConfigurationInput) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{17}
}

func (x *ConfigurationInput) GetOptions() *structpb.Struct {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ConfigurationInput) GetState() *structpb.Struct {
	if x != nil {
		return x.State
	}
	return nil
}

func (m *ConfigurationInput) GetConfigOptions() isConfigurationInput_ConfigOptions {
	if m != nil {
		return m.ConfigOptions
	}
	return nil
}

func (x *ConfigurationInput) GetAwsOptions() *AwsConfigurationOptionsInput {
	if x, ok := x.GetConfigOptions().(*ConfigurationInput_AwsOptions); ok {
		return x.AwsOptions
	}
	return nil
}

func (x *ConfigurationInput) GetK8SOptions() *K8SConfigurationOptionsInput {
	if x, ok := x.GetConfigOptions().(*ConfigurationInput_K8SOptions); ok {
		return x.K8SOptions
	}
	return nil
}

type isConfigurationInput_ConfigOptions interface {
	isConfigurationInput_ConfigOptions()
}

type ConfigurationInput_AwsOptions struct {
	AwsOptions *AwsConfigurationOptionsInput `protobuf:"bytes,3,opt,name=aws_options,json=awsOptions,proto3,oneof"`
}

type ConfigurationInput_K8SOptions struct {
	K8SOptions *K8SConfigurationOptionsInput `protobuf:"bytes,4,opt,name=k8s_options,json=k8sOptions,proto3,oneof"`
}

func (*ConfigurationInput_AwsOptions) isConfigurationInput_ConfigOptions() {}

func (*ConfigurationInput_K8SOptions) isConfigurationInput_ConfigOptions() {}

type AwsConfigurationOptionsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region            string             `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	IsOrganization    bool               `protobuf:"varint,2,opt,name=isOrganization,proto3" json:"isOrganization,omitempty"`
	ScanConfiguration *ScanConfiguration `protobuf:"bytes,3,opt,name=scan_configuration,json=scanConfiguration,proto3" json:"scan_configuration,omitempty"`
}

func (x *AwsConfigurationOptionsInput) Reset() {
	*x = AwsConfigurationOptionsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsConfigurationOptionsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsConfigurationOptionsInput) ProtoMessage() {}

func (x *AwsConfigurationOptionsInput) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsConfigurationOptionsInput.ProtoReflect.Descriptor instead.
func (*AwsConfigurationOptionsInput) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{18}
}

func (x *AwsConfigurationOptionsInput) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AwsConfigurationOptionsInput) GetIsOrganization() bool {
	if x != nil {
		return x.IsOrganization
	}
	return false
}

func (x *AwsConfigurationOptionsInput) GetScanConfiguration() *ScanConfiguration {
	if x != nil {
		return x.ScanConfiguration
	}
	return nil
}

type AwsConfigurationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region            string             `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	IsOrganization    bool               `protobuf:"varint,2,opt,name=isOrganization,proto3" json:"isOrganization,omitempty"`
	ScanConfiguration *ScanConfiguration `protobuf:"bytes,3,opt,name=scan_configuration,json=scanConfiguration,proto3" json:"scan_configuration,omitempty"`
	SnsEndpoint       string             `protobuf:"bytes,4,opt,name=snsEndpoint,proto3" json:"snsEndpoint,omitempty"`
}

func (x *AwsConfigurationOptions) Reset() {
	*x = AwsConfigurationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsConfigurationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsConfigurationOptions) ProtoMessage() {}

func (x *AwsConfigurationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsConfigurationOptions.ProtoReflect.Descriptor instead.
func (*AwsConfigurationOptions) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{19}
}

func (x *AwsConfigurationOptions) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AwsConfigurationOptions) GetIsOrganization() bool {
	if x != nil {
		return x.IsOrganization
	}
	return false
}

func (x *AwsConfigurationOptions) GetScanConfiguration() *ScanConfiguration {
	if x != nil {
		return x.ScanConfiguration
	}
	return nil
}

func (x *AwsConfigurationOptions) GetSnsEndpoint() string {
	if x != nil {
		return x.SnsEndpoint
	}
	return ""
}

type K8SConfigurationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanNodes          bool   `protobuf:"varint,1,opt,name=scan_nodes,json=scanNodes,proto3" json:"scan_nodes,omitempty"`
	ScanWorkloads      bool   `protobuf:"varint,2,opt,name=scan_workloads,json=scanWorkloads,proto3" json:"scan_workloads,omitempty"`
	ScanDeploys        bool   `protobuf:"varint,3,opt,name=scan_deploys,json=scanDeploys,proto3" json:"scan_deploys,omitempty"`
	CertificateManager string `protobuf:"bytes,4,opt,name=certificate_manager,json=certificateManager,proto3" json:"certificate_manager,omitempty"`
	ScanPublicImages   bool   `protobuf:"varint,5,opt,name=scan_public_images,json=scanPublicImages,proto3" json:"scan_public_images,omitempty"`
}

func (x *K8SConfigurationOptions) Reset() {
	*x = K8SConfigurationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SConfigurationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SConfigurationOptions) ProtoMessage() {}

func (x *K8SConfigurationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SConfigurationOptions.ProtoReflect.Descriptor instead.
func (*K8SConfigurationOptions) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{20}
}

func (x *K8SConfigurationOptions) GetScanNodes() bool {
	if x != nil {
		return x.ScanNodes
	}
	return false
}

func (x *K8SConfigurationOptions) GetScanWorkloads() bool {
	if x != nil {
		return x.ScanWorkloads
	}
	return false
}

func (x *K8SConfigurationOptions) GetScanDeploys() bool {
	if x != nil {
		return x.ScanDeploys
	}
	return false
}

func (x *K8SConfigurationOptions) GetCertificateManager() string {
	if x != nil {
		return x.CertificateManager
	}
	return ""
}

func (x *K8SConfigurationOptions) GetScanPublicImages() bool {
	if x != nil {
		return x.ScanPublicImages
	}
	return false
}

// K8S specific messages
type K8SConfigurationOptionsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanNodes          bool   `protobuf:"varint,1,opt,name=scan_nodes,json=scanNodes,proto3" json:"scan_nodes,omitempty"`
	ScanWorkloads      bool   `protobuf:"varint,2,opt,name=scan_workloads,json=scanWorkloads,proto3" json:"scan_workloads,omitempty"`
	ScanDeploys        bool   `protobuf:"varint,3,opt,name=scan_deploys,json=scanDeploys,proto3" json:"scan_deploys,omitempty"`
	CertificateManager string `protobuf:"bytes,4,opt,name=certificate_manager,json=certificateManager,proto3" json:"certificate_manager,omitempty"`
	ScanPublicImages   bool   `protobuf:"varint,5,opt,name=scan_public_images,json=scanPublicImages,proto3" json:"scan_public_images,omitempty"`
}

func (x *K8SConfigurationOptionsInput) Reset() {
	*x = K8SConfigurationOptionsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SConfigurationOptionsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SConfigurationOptionsInput) ProtoMessage() {}

func (x *K8SConfigurationOptionsInput) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SConfigurationOptionsInput.ProtoReflect.Descriptor instead.
func (*K8SConfigurationOptionsInput) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{21}
}

func (x *K8SConfigurationOptionsInput) GetScanNodes() bool {
	if x != nil {
		return x.ScanNodes
	}
	return false
}

func (x *K8SConfigurationOptionsInput) GetScanWorkloads() bool {
	if x != nil {
		return x.ScanWorkloads
	}
	return false
}

func (x *K8SConfigurationOptionsInput) GetScanDeploys() bool {
	if x != nil {
		return x.ScanDeploys
	}
	return false
}

func (x *K8SConfigurationOptionsInput) GetCertificateManager() string {
	if x != nil {
		return x.CertificateManager
	}
	return ""
}

func (x *K8SConfigurationOptionsInput) GetScanPublicImages() bool {
	if x != nil {
		return x.ScanPublicImages
	}
	return false
}

type ScanConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountScan       bool            `protobuf:"varint,1,opt,name=account_scan,json=accountScan,proto3" json:"account_scan,omitempty"`
	Ec2Scan           bool            `protobuf:"varint,2,opt,name=ec2_scan,json=ec2Scan,proto3" json:"ec2_scan,omitempty"`
	EcrScan           bool            `protobuf:"varint,3,opt,name=ecr_scan,json=ecrScan,proto3" json:"ecr_scan,omitempty"`
	CronScanInHours   int32           `protobuf:"varint,4,opt,name=cron_scan_in_hours,json=cronScanInHours,proto3" json:"cron_scan_in_hours,omitempty"`
	Ec2ScanOptions    *Ec2ScanOptions `protobuf:"bytes,7,opt,name=ec2_scan_options,json=ec2ScanOptions,proto3" json:"ec2_scan_options,omitempty"`
	EventScanTriggers []*EventPattern `protobuf:"bytes,8,rep,name=event_scan_triggers,json=eventScanTriggers,proto3" json:"event_scan_triggers,omitempty"`
}

func (x *ScanConfiguration) Reset() {
	*x = ScanConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanConfiguration) ProtoMessage() {}

func (x *ScanConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanConfiguration.ProtoReflect.Descriptor instead.
func (*ScanConfiguration) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{22}
}

func (x *ScanConfiguration) GetAccountScan() bool {
	if x != nil {
		return x.AccountScan
	}
	return false
}

func (x *ScanConfiguration) GetEc2Scan() bool {
	if x != nil {
		return x.Ec2Scan
	}
	return false
}

func (x *ScanConfiguration) GetEcrScan() bool {
	if x != nil {
		return x.EcrScan
	}
	return false
}

func (x *ScanConfiguration) GetCronScanInHours() int32 {
	if x != nil {
		return x.CronScanInHours
	}
	return 0
}

func (x *ScanConfiguration) GetEc2ScanOptions() *Ec2ScanOptions {
	if x != nil {
		return x.Ec2ScanOptions
	}
	return nil
}

func (x *ScanConfiguration) GetEventScanTriggers() []*EventPattern {
	if x != nil {
		return x.EventScanTriggers
	}
	return nil
}

type EventPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanType        ScanType `protobuf:"varint,1,opt,name=scan_type,json=scanType,proto3,enum=mondoo.integrations.v1.ScanType" json:"scan_type,omitempty"`
	EventSource     string   `protobuf:"bytes,2,opt,name=event_source,json=eventSource,proto3" json:"event_source,omitempty"`
	EventDetailType string   `protobuf:"bytes,3,opt,name=event_detail_type,json=eventDetailType,proto3" json:"event_detail_type,omitempty"`
}

func (x *EventPattern) Reset() {
	*x = EventPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventPattern) ProtoMessage() {}

func (x *EventPattern) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventPattern.ProtoReflect.Descriptor instead.
func (*EventPattern) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{23}
}

func (x *EventPattern) GetScanType() ScanType {
	if x != nil {
		return x.ScanType
	}
	return ScanType_ALL
}

func (x *EventPattern) GetEventSource() string {
	if x != nil {
		return x.EventSource
	}
	return ""
}

func (x *EventPattern) GetEventDetailType() string {
	if x != nil {
		return x.EventDetailType
	}
	return ""
}

type Ec2ScanOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssm                    bool              `protobuf:"varint,1,opt,name=ssm,proto3" json:"ssm,omitempty"`
	AwsSecretsManagerVault bool              `protobuf:"varint,2,opt,name=aws_secrets_manager_vault,json=awsSecretsManagerVault,proto3" json:"aws_secrets_manager_vault,omitempty"`
	SecretsMetadataQuery   string            `protobuf:"bytes,3,opt,name=secrets_metadata_query,json=secretsMetadataQuery,proto3" json:"secrets_metadata_query,omitempty"`
	InstanceIdsFilter      []string          `protobuf:"bytes,4,rep,name=instance_ids_filter,json=instanceIdsFilter,proto3" json:"instance_ids_filter,omitempty"`
	RegionsFilter          []string          `protobuf:"bytes,5,rep,name=regions_filter,json=regionsFilter,proto3" json:"regions_filter,omitempty"`
	TagsFilter             map[string]string `protobuf:"bytes,6,rep,name=tags_filter,json=tagsFilter,proto3" json:"tags_filter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VaultType              VaultType         `protobuf:"varint,7,opt,name=vault_type,json=vaultType,proto3,enum=mondoo.integrations.v1.VaultType" json:"vault_type,omitempty"`
	EbsVolumeScan          bool              `protobuf:"varint,8,opt,name=ebs_volume_scan,json=ebsVolumeScan,proto3" json:"ebs_volume_scan,omitempty"`
	EbsScanOptions         *EbsScanOptions   `protobuf:"bytes,9,opt,name=ebs_scan_options,json=ebsScanOptions,proto3" json:"ebs_scan_options,omitempty"`
}

func (x *Ec2ScanOptions) Reset() {
	*x = Ec2ScanOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ec2ScanOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ec2ScanOptions) ProtoMessage() {}

func (x *Ec2ScanOptions) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ec2ScanOptions.ProtoReflect.Descriptor instead.
func (*Ec2ScanOptions) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{24}
}

func (x *Ec2ScanOptions) GetSsm() bool {
	if x != nil {
		return x.Ssm
	}
	return false
}

func (x *Ec2ScanOptions) GetAwsSecretsManagerVault() bool {
	if x != nil {
		return x.AwsSecretsManagerVault
	}
	return false
}

func (x *Ec2ScanOptions) GetSecretsMetadataQuery() string {
	if x != nil {
		return x.SecretsMetadataQuery
	}
	return ""
}

func (x *Ec2ScanOptions) GetInstanceIdsFilter() []string {
	if x != nil {
		return x.InstanceIdsFilter
	}
	return nil
}

func (x *Ec2ScanOptions) GetRegionsFilter() []string {
	if x != nil {
		return x.RegionsFilter
	}
	return nil
}

func (x *Ec2ScanOptions) GetTagsFilter() map[string]string {
	if x != nil {
		return x.TagsFilter
	}
	return nil
}

func (x *Ec2ScanOptions) GetVaultType() VaultType {
	if x != nil {
		return x.VaultType
	}
	return VaultType_AWS_SECRETS_MANAGER
}

func (x *Ec2ScanOptions) GetEbsVolumeScan() bool {
	if x != nil {
		return x.EbsVolumeScan
	}
	return false
}

func (x *Ec2ScanOptions) GetEbsScanOptions() *EbsScanOptions {
	if x != nil {
		return x.EbsScanOptions
	}
	return nil
}

type EbsScanOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsgOptions *AsgOptions `protobuf:"bytes,1,opt,name=asg_options,json=asgOptions,proto3" json:"asg_options,omitempty"`
	// how many instances should 1 scanner instance be responsible for scanning
	// we divide total instances to scan by this number to determine the amount of instances to spin up
	TargetInstancesPerScanner int32 `protobuf:"varint,2,opt,name=target_instances_per_scanner,json=targetInstancesPerScanner,proto3" json:"target_instances_per_scanner,omitempty"`
}

func (x *EbsScanOptions) Reset() {
	*x = EbsScanOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EbsScanOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EbsScanOptions) ProtoMessage() {}

func (x *EbsScanOptions) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EbsScanOptions.ProtoReflect.Descriptor instead.
func (*EbsScanOptions) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{25}
}

func (x *EbsScanOptions) GetAsgOptions() *AsgOptions {
	if x != nil {
		return x.AsgOptions
	}
	return nil
}

func (x *EbsScanOptions) GetTargetInstancesPerScanner() int32 {
	if x != nil {
		return x.TargetInstancesPerScanner
	}
	return 0
}

type AsgOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxInstances int32  `protobuf:"varint,1,opt,name=max_instances,json=maxInstances,proto3" json:"max_instances,omitempty"`
	ImageType    string `protobuf:"bytes,2,opt,name=image_type,json=imageType,proto3" json:"image_type,omitempty"`
	InstanceType string `protobuf:"bytes,3,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
}

func (x *AsgOptions) Reset() {
	*x = AsgOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsgOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsgOptions) ProtoMessage() {}

func (x *AsgOptions) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsgOptions.ProtoReflect.Descriptor instead.
func (*AsgOptions) Descriptor() ([]byte, []int) {
	return file_integrations_proto_rawDescGZIP(), []int{26}
}

func (x *AsgOptions) GetMaxInstances() int32 {
	if x != nil {
		return x.MaxInstances
	}
	return 0
}

func (x *AsgOptions) GetImageType() string {
	if x != nil {
		return x.ImageType
	}
	return ""
}

func (x *AsgOptions) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

var File_integrations_proto protoreflect.FileDescriptor

var file_integrations_proto_rawDesc = []byte{
	0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2c, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x72, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x72, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f,
	0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb7, 0x03, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4d, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x13,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x6e, 0x64,
	0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x54, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x6f, 0x6e, 0x64,
	0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x6f, 0x6e,
	0x67, 0x4c, 0x69, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x62, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f,
	0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d,
	0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57,
	0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47,
	0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc1, 0x05, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x12, 0x47, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x72, 0x6e, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x6e,
	0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5d, 0x0a, 0x13, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x12, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x6e, 0x64,
	0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x22, 0x29, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x72, 0x6e, 0x22, 0x5b,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x72,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x6f, 0x6e,
	0x67, 0x4c, 0x69, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x36, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x22, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x72, 0x6e, 0x22, 0x25, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd0,
	0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x72, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x54, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xab, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x6f, 0x6e,
	0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x61,
	0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x6b, 0x38, 0x73,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x38, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x0a, 0x6b, 0x38, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xba, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x57, 0x0a, 0x0b, 0x6b, 0x38, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x38, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x6b, 0x38, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb8, 0x01, 0x0a,
	0x1c, 0x41, 0x77, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a,
	0x12, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x6f, 0x6e, 0x64,
	0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd5, 0x01, 0x0a, 0x17, 0x41, 0x77, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x69,
	0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x6e, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x6e, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22,
	0xe1, 0x01, 0x0a, 0x17, 0x4b, 0x38, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x73, 0x63, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x1c, 0x4b, 0x38, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x63, 0x61,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x73, 0x12, 0x2f, 0x0a,
	0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0xc1, 0x02, 0x0a,
	0x11, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x63,
	0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x63, 0x61,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x63, 0x32, 0x53, 0x63, 0x61, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x63, 0x72, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x63, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x63,
	0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x63, 0x61,
	0x6e, 0x49, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x65, 0x63, 0x32, 0x5f,
	0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x63, 0x32, 0x53,
	0x63, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x65, 0x63, 0x32, 0x53,
	0x63, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x13, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x11, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73,
	0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xbe, 0x04, 0x0a, 0x0e, 0x45, 0x63, 0x32, 0x53, 0x63, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x73, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x73, 0x73, 0x6d, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x0b,
	0x74, 0x61, 0x67, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x63, 0x32, 0x53, 0x63,
	0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x61, 0x67, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x6e, 0x64,
	0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x62, 0x73, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x65, 0x62, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x12,
	0x50, 0x0a, 0x10, 0x65, 0x62, 0x73, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x6e, 0x64,
	0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x62, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0e, 0x65, 0x62, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x54, 0x61, 0x67, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x96, 0x01, 0x0a, 0x0e, 0x45, 0x62, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x73, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f,
	0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x61, 0x73,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x75, 0x0a, 0x0a, 0x41, 0x73, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x2a, 0x25, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x57, 0x53, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x4b, 0x38, 0x53, 0x10, 0x02, 0x2a, 0x6c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f,
	0x53, 0x45, 0x54, 0x55, 0x50, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x06, 0x2a, 0x5e, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0x03, 0x2a, 0x3b, 0x0a, 0x08, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x43, 0x32, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x45, 0x43, 0x52, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x42, 0x53,
	0x10, 0x04, 0x2a, 0x3d, 0x0a, 0x09, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x57, 0x53, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x53, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x57, 0x53, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10,
	0x01, 0x32, 0xf0, 0x05, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1d, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x2d, 0x2e,
	0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d,
	0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x2e, 0x6d,
	0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f,
	0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x30, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x30, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x6f, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2f, 0x6e, 0x65, 0x78,
	0x75, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_integrations_proto_rawDescOnce sync.Once
	file_integrations_proto_rawDescData = file_integrations_proto_rawDesc
)

func file_integrations_proto_rawDescGZIP() []byte {
	file_integrations_proto_rawDescOnce.Do(func() {
		file_integrations_proto_rawDescData = protoimpl.X.CompressGZIP(file_integrations_proto_rawDescData)
	})
	return file_integrations_proto_rawDescData
}

var file_integrations_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_integrations_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_integrations_proto_goTypes = []interface{}{
	(Type)(0),                              // 0: mondoo.integrations.v1.Type
	(Status)(0),                            // 1: mondoo.integrations.v1.Status
	(MessageStatus)(0),                     // 2: mondoo.integrations.v1.MessageStatus
	(ScanType)(0),                          // 3: mondoo.integrations.v1.ScanType
	(VaultType)(0),                         // 4: mondoo.integrations.v1.VaultType
	(*DeleteIntegrationRequest)(nil),       // 5: mondoo.integrations.v1.DeleteIntegrationRequest
	(*DeleteIntegrationResponse)(nil),      // 6: mondoo.integrations.v1.DeleteIntegrationResponse
	(*Query)(nil),                          // 7: mondoo.integrations.v1.Query
	(*CreateIntegrationRequest)(nil),       // 8: mondoo.integrations.v1.CreateIntegrationRequest
	(*CreateIntegrationResponse)(nil),      // 9: mondoo.integrations.v1.CreateIntegrationResponse
	(*UpdateIntegrationResponse)(nil),      // 10: mondoo.integrations.v1.UpdateIntegrationResponse
	(*Integrations)(nil),                   // 11: mondoo.integrations.v1.Integrations
	(*Integration)(nil),                    // 12: mondoo.integrations.v1.Integration
	(*IntegrationMessages)(nil),            // 13: mondoo.integrations.v1.IntegrationMessages
	(*IntegrationMessage)(nil),             // 14: mondoo.integrations.v1.IntegrationMessage
	(*GetIntegrationRequest)(nil),          // 15: mondoo.integrations.v1.GetIntegrationRequest
	(*GetTokenForIntegrationRequest)(nil),  // 16: mondoo.integrations.v1.GetTokenForIntegrationRequest
	(*GetTokenForIntegrationResponse)(nil), // 17: mondoo.integrations.v1.GetTokenForIntegrationResponse
	(*GetNameRequest)(nil),                 // 18: mondoo.integrations.v1.GetNameRequest
	(*GetNameResponse)(nil),                // 19: mondoo.integrations.v1.GetNameResponse
	(*UpdateIntegrationRequest)(nil),       // 20: mondoo.integrations.v1.UpdateIntegrationRequest
	(*Configuration)(nil),                  // 21: mondoo.integrations.v1.Configuration
	(*ConfigurationInput)(nil),             // 22: mondoo.integrations.v1.ConfigurationInput
	(*AwsConfigurationOptionsInput)(nil),   // 23: mondoo.integrations.v1.AwsConfigurationOptionsInput
	(*AwsConfigurationOptions)(nil),        // 24: mondoo.integrations.v1.AwsConfigurationOptions
	(*K8SConfigurationOptions)(nil),        // 25: mondoo.integrations.v1.K8sConfigurationOptions
	(*K8SConfigurationOptionsInput)(nil),   // 26: mondoo.integrations.v1.K8sConfigurationOptionsInput
	(*ScanConfiguration)(nil),              // 27: mondoo.integrations.v1.ScanConfiguration
	(*EventPattern)(nil),                   // 28: mondoo.integrations.v1.EventPattern
	(*Ec2ScanOptions)(nil),                 // 29: mondoo.integrations.v1.Ec2ScanOptions
	(*EbsScanOptions)(nil),                 // 30: mondoo.integrations.v1.EbsScanOptions
	(*AsgOptions)(nil),                     // 31: mondoo.integrations.v1.AsgOptions
	nil,                                    // 32: mondoo.integrations.v1.CreateIntegrationRequest.LabelsEntry
	nil,                                    // 33: mondoo.integrations.v1.Integration.LabelsEntry
	nil,                                    // 34: mondoo.integrations.v1.UpdateIntegrationRequest.LabelsEntry
	nil,                                    // 35: mondoo.integrations.v1.Ec2ScanOptions.TagsFilterEntry
	(*structpb.Struct)(nil),                // 36: google.protobuf.Struct
}
var file_integrations_proto_depIdxs = []int32{
	0,  // 0: mondoo.integrations.v1.Query.type:type_name -> mondoo.integrations.v1.Type
	22, // 1: mondoo.integrations.v1.CreateIntegrationRequest.configuration_input:type_name -> mondoo.integrations.v1.ConfigurationInput
	32, // 2: mondoo.integrations.v1.CreateIntegrationRequest.labels:type_name -> mondoo.integrations.v1.CreateIntegrationRequest.LabelsEntry
	0,  // 3: mondoo.integrations.v1.CreateIntegrationRequest.type:type_name -> mondoo.integrations.v1.Type
	12, // 4: mondoo.integrations.v1.CreateIntegrationResponse.integration:type_name -> mondoo.integrations.v1.Integration
	12, // 5: mondoo.integrations.v1.UpdateIntegrationResponse.integration:type_name -> mondoo.integrations.v1.Integration
	12, // 6: mondoo.integrations.v1.Integrations.integrations:type_name -> mondoo.integrations.v1.Integration
	1,  // 7: mondoo.integrations.v1.Integration.status:type_name -> mondoo.integrations.v1.Status
	21, // 8: mondoo.integrations.v1.Integration.configuration:type_name -> mondoo.integrations.v1.Configuration
	36, // 9: mondoo.integrations.v1.Integration.error:type_name -> google.protobuf.Struct
	33, // 10: mondoo.integrations.v1.Integration.labels:type_name -> mondoo.integrations.v1.Integration.LabelsEntry
	0,  // 11: mondoo.integrations.v1.Integration.type:type_name -> mondoo.integrations.v1.Type
	13, // 12: mondoo.integrations.v1.Integration.messages:type_name -> mondoo.integrations.v1.IntegrationMessages
	14, // 13: mondoo.integrations.v1.IntegrationMessages.messages:type_name -> mondoo.integrations.v1.IntegrationMessage
	2,  // 14: mondoo.integrations.v1.IntegrationMessage.status:type_name -> mondoo.integrations.v1.MessageStatus
	36, // 15: mondoo.integrations.v1.IntegrationMessage.extra:type_name -> google.protobuf.Struct
	22, // 16: mondoo.integrations.v1.UpdateIntegrationRequest.configuration_input:type_name -> mondoo.integrations.v1.ConfigurationInput
	34, // 17: mondoo.integrations.v1.UpdateIntegrationRequest.labels:type_name -> mondoo.integrations.v1.UpdateIntegrationRequest.LabelsEntry
	36, // 18: mondoo.integrations.v1.Configuration.options:type_name -> google.protobuf.Struct
	36, // 19: mondoo.integrations.v1.Configuration.state:type_name -> google.protobuf.Struct
	24, // 20: mondoo.integrations.v1.Configuration.aws_options:type_name -> mondoo.integrations.v1.AwsConfigurationOptions
	25, // 21: mondoo.integrations.v1.Configuration.k8s_options:type_name -> mondoo.integrations.v1.K8sConfigurationOptions
	36, // 22: mondoo.integrations.v1.ConfigurationInput.options:type_name -> google.protobuf.Struct
	36, // 23: mondoo.integrations.v1.ConfigurationInput.state:type_name -> google.protobuf.Struct
	23, // 24: mondoo.integrations.v1.ConfigurationInput.aws_options:type_name -> mondoo.integrations.v1.AwsConfigurationOptionsInput
	26, // 25: mondoo.integrations.v1.ConfigurationInput.k8s_options:type_name -> mondoo.integrations.v1.K8sConfigurationOptionsInput
	27, // 26: mondoo.integrations.v1.AwsConfigurationOptionsInput.scan_configuration:type_name -> mondoo.integrations.v1.ScanConfiguration
	27, // 27: mondoo.integrations.v1.AwsConfigurationOptions.scan_configuration:type_name -> mondoo.integrations.v1.ScanConfiguration
	29, // 28: mondoo.integrations.v1.ScanConfiguration.ec2_scan_options:type_name -> mondoo.integrations.v1.Ec2ScanOptions
	28, // 29: mondoo.integrations.v1.ScanConfiguration.event_scan_triggers:type_name -> mondoo.integrations.v1.EventPattern
	3,  // 30: mondoo.integrations.v1.EventPattern.scan_type:type_name -> mondoo.integrations.v1.ScanType
	35, // 31: mondoo.integrations.v1.Ec2ScanOptions.tags_filter:type_name -> mondoo.integrations.v1.Ec2ScanOptions.TagsFilterEntry
	4,  // 32: mondoo.integrations.v1.Ec2ScanOptions.vault_type:type_name -> mondoo.integrations.v1.VaultType
	30, // 33: mondoo.integrations.v1.Ec2ScanOptions.ebs_scan_options:type_name -> mondoo.integrations.v1.EbsScanOptions
	31, // 34: mondoo.integrations.v1.EbsScanOptions.asg_options:type_name -> mondoo.integrations.v1.AsgOptions
	7,  // 35: mondoo.integrations.v1.IntegrationsManager.List:input_type -> mondoo.integrations.v1.Query
	15, // 36: mondoo.integrations.v1.IntegrationsManager.Get:input_type -> mondoo.integrations.v1.GetIntegrationRequest
	18, // 37: mondoo.integrations.v1.IntegrationsManager.GetName:input_type -> mondoo.integrations.v1.GetNameRequest
	16, // 38: mondoo.integrations.v1.IntegrationsManager.GetTokenForIntegration:input_type -> mondoo.integrations.v1.GetTokenForIntegrationRequest
	8,  // 39: mondoo.integrations.v1.IntegrationsManager.Create:input_type -> mondoo.integrations.v1.CreateIntegrationRequest
	20, // 40: mondoo.integrations.v1.IntegrationsManager.Update:input_type -> mondoo.integrations.v1.UpdateIntegrationRequest
	5,  // 41: mondoo.integrations.v1.IntegrationsManager.Delete:input_type -> mondoo.integrations.v1.DeleteIntegrationRequest
	11, // 42: mondoo.integrations.v1.IntegrationsManager.List:output_type -> mondoo.integrations.v1.Integrations
	12, // 43: mondoo.integrations.v1.IntegrationsManager.Get:output_type -> mondoo.integrations.v1.Integration
	19, // 44: mondoo.integrations.v1.IntegrationsManager.GetName:output_type -> mondoo.integrations.v1.GetNameResponse
	17, // 45: mondoo.integrations.v1.IntegrationsManager.GetTokenForIntegration:output_type -> mondoo.integrations.v1.GetTokenForIntegrationResponse
	9,  // 46: mondoo.integrations.v1.IntegrationsManager.Create:output_type -> mondoo.integrations.v1.CreateIntegrationResponse
	10, // 47: mondoo.integrations.v1.IntegrationsManager.Update:output_type -> mondoo.integrations.v1.UpdateIntegrationResponse
	6,  // 48: mondoo.integrations.v1.IntegrationsManager.Delete:output_type -> mondoo.integrations.v1.DeleteIntegrationResponse
	42, // [42:49] is the sub-list for method output_type
	35, // [35:42] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_integrations_proto_init() }
func file_integrations_proto_init() {
	if File_integrations_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_integrations_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIntegrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIntegrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIntegrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIntegrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIntegrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integrations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrationMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIntegrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenForIntegrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenForIntegrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIntegrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsConfigurationOptionsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsConfigurationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SConfigurationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SConfigurationOptionsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ec2ScanOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EbsScanOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsgOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_integrations_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*Configuration_AwsOptions)(nil),
		(*Configuration_K8SOptions)(nil),
	}
	file_integrations_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*ConfigurationInput_AwsOptions)(nil),
		(*ConfigurationInput_K8SOptions)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_integrations_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_integrations_proto_goTypes,
		DependencyIndexes: file_integrations_proto_depIdxs,
		EnumInfos:         file_integrations_proto_enumTypes,
		MessageInfos:      file_integrations_proto_msgTypes,
	}.Build()
	File_integrations_proto = out.File
	file_integrations_proto_rawDesc = nil
	file_integrations_proto_goTypes = nil
	file_integrations_proto_depIdxs = nil
}
