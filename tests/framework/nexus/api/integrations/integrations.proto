syntax = "proto3";

import "google/protobuf/struct.proto";

package mondoo.integrations.v1;
option go_package = "go.mondoo.com/mondoo/nexus/api/integrations";

service IntegrationsManager {

  /* SERVER CRUDL ACTIONS */
  // List returns all integrations for a space
  rpc List(Query) returns (Integrations);
  // Get returns a the detailed information about a specific integration
  rpc Get(GetIntegrationRequest) returns (Integration);
  // GetName returns the name of the integration
  rpc GetName(GetNameRequest) returns (GetNameResponse);
  // GetTokenForIntegration takes an integration mrn; returns the value for the long lived token if one exists or generates a new token
  rpc GetTokenForIntegration(GetTokenForIntegrationRequest) returns (GetTokenForIntegrationResponse);
  // Create an integration within a space. This will come with a long-lived token with the integration mrn embedded as a label
  rpc Create(CreateIntegrationRequest) returns (CreateIntegrationResponse);
  // Updates the configuration options and name for the integration
  rpc Update(UpdateIntegrationRequest) returns (UpdateIntegrationResponse);
  // Delete the integration from mondoo, delete the long lived token that was created on create, and
  // removes all service accounts created with that token
  rpc Delete(DeleteIntegrationRequest) returns (DeleteIntegrationResponse);
}

message DeleteIntegrationRequest {
  string mrn = 1;
}

message DeleteIntegrationResponse {}

message Query {
  string spaceMrn = 1;
  Type type = 2;
}

message CreateIntegrationRequest {
  string space_mrn = 1;
  string name = 2;
  // optional, source identifiers for the integration (e.g. AWS account id)
  repeated string identifiers = 3;
  ConfigurationInput configuration_input = 4;
  map<string,string> labels = 5;
  Type type = 6;
  bool long_lived_token = 7;
}

enum Type {
  UNKNOWN = 0;
  AWS = 1;
  K8S = 2;
}

message CreateIntegrationResponse {
  Integration integration = 1;
}

message UpdateIntegrationResponse {
  Integration integration = 1;
}

message Integrations {
  repeated Integration integrations = 1;
}

message Integration {
  string mrn = 1;
  // user selected name for the integration (display name)
  string name = 2;
  Status status = 3;
  string created_at = 4;
  string last_modified = 5;
  // scan configuration options for the integration
  Configuration configuration = 6;
  // the error object reported to the integration
  // FIXME: deprecated - this can be removed and replaced by IntegrationMessages.
  google.protobuf.Struct error = 7;
  // time of last checkin from integration client
  string last_checkin = 8;
  // token associated with the integration
  string token = 9;
  // optional, source identifiers for the integration, e.g. a list of AWS account ids
  repeated string identifiers = 10;
  map<string, string> labels = 11;
  // enum for the integration type: AWS, K8s, etc 
  Type type = 12;
  string space_mrn = 13;
  // messages that convey extra information about the integration - these messages can be informational, warnings or errors.
  IntegrationMessages messages = 14;
  // mrn of the user that created the integration
  string created_by = 15;
}

enum Status {
  NOT_READY = 0;
  WAITING_FOR_SETUP = 1;
  ACTIVE = 2;
  ERROR = 3;
  DELETED = 4;
  MISSING = 5;
  WARNING = 6;
}

message IntegrationMessages {
  repeated IntegrationMessage messages = 1;
}

enum MessageStatus {
  MESSAGE_UNKNOWN = 0;
  MESSAGE_WARNING = 1;
  MESSAGE_ERROR = 2;
  MESSAGE_INFO = 3;
}

message IntegrationMessage {
  string message = 1;
  string timestamp = 2;
  MessageStatus status = 3;
  bool reported_by_agent = 4;
  string identifier = 5;
  // Anything extra that the message might contain. 
  google.protobuf.Struct extra = 6;
}

message GetIntegrationRequest {
  string mrn = 1;
}

message GetTokenForIntegrationRequest {
  string mrn = 1;
  bool long_lived_token = 7;
}

message GetTokenForIntegrationResponse {
  string token = 1;
}

message GetNameRequest {
  string mrn = 1;
}

message GetNameResponse {
  string name = 1;
}

message UpdateIntegrationRequest {
  string mrn = 1;
  string name = 2;
  // optional, source identifiers for the integration (e.g. AWS account id)
  repeated string identifiers = 3;
  ConfigurationInput configuration_input = 4;
  map<string,string> labels = 5;
}

message Configuration {
  // options for the configuration. these are usually scan configuration options,
  // and they are added on integration create/updated with the integration update call
  // e.g. the struct representation of the object that says { scan_nodes: true, scan_workloads: false }
  // FIXME: can be replaced by config_options that provide more precise API spec.
  google.protobuf.Struct options = 1;
  // any kind of configuration state or other information about the integration. 
  // stored so it can be displayed to the user as needed
  google.protobuf.Struct state = 2;

  // the different integration option types. these can be used in place of 'options' to provide API safety and stability.
  // the options field can still be used in the future for exploratory/unstable integrations if needed.
  oneof config_options {
    AwsConfigurationOptions aws_options = 3;
    K8sConfigurationOptions k8s_options = 4;
  }
}

message ConfigurationInput {
  // options for the configuration. these are usually scan configuration options,
  // and they are added on integration create/updated with the integration update call
  // e.g. the struct representation of the object that says { scan_nodes: true, scan_workloads: false }
  // FIXME: can be replaced by config_options that provide more precise API spec.
  google.protobuf.Struct options = 1;// any kind of configuration state or other information about the integration. 
  // stored so it can be displayed to the user as needed
  google.protobuf.Struct state = 2;

  // the different integration option types. these can be used in place of 'options' to provide API safety and stability.
  // the options field can still be used in the future for exploratory/unstable integrations if needed.
  oneof config_options {
    AwsConfigurationOptionsInput aws_options = 3;
    K8sConfigurationOptionsInput k8s_options = 4;
  }
}

message AwsConfigurationOptionsInput {
  string region = 1;
  bool isOrganization = 2;
  ScanConfiguration scan_configuration = 3;
}

message AwsConfigurationOptions {
  string region = 1;
  bool isOrganization = 2;
  ScanConfiguration scan_configuration = 3;
  string snsEndpoint = 4;
}

message K8sConfigurationOptions {
  bool scan_nodes = 1;
  bool scan_workloads = 2;
  bool scan_deploys = 3;
  string certificate_manager = 4;
  bool scan_public_images = 5;
}

/* K8S specific messages */
message K8sConfigurationOptionsInput {
  bool scan_nodes = 1;
  bool scan_workloads = 2;
  bool scan_deploys = 3;
  string certificate_manager = 4;
  bool scan_public_images = 5;
}

message ScanConfiguration {
  bool account_scan = 1;
  bool ec2_scan = 2;
  bool ecr_scan = 3;
  int32 cron_scan_in_hours = 4;
  Ec2ScanOptions ec2_scan_options = 7;
  repeated EventPattern event_scan_triggers = 8;
}

enum ScanType {
  ALL = 0;
  ACCOUNT = 1;
  EC2 = 2;
  ECR = 3;
  EBS = 4;
}

message EventPattern {
  ScanType scan_type = 1;
  string event_source = 2;
  string event_detail_type = 3;
}

message Ec2ScanOptions {
  bool ssm = 1;
  bool aws_secrets_manager_vault = 2;
  string secrets_metadata_query = 3;
  repeated string instance_ids_filter = 4;
  repeated string regions_filter = 5;
  map<string, string> tags_filter = 6;
  VaultType vault_type = 7;
  bool ebs_volume_scan = 8;
  EbsScanOptions ebs_scan_options = 9;
}

message EbsScanOptions {
  AsgOptions asg_options = 1;
  // how many instances should 1 scanner instance be responsible for scanning
  // we divide total instances to scan by this number to determine the amount of instances to spin up
  int32 target_instances_per_scanner = 2; 
}

message AsgOptions {
  int32 max_instances = 1;
  string image_type = 2;
  string instance_type = 3;
}

enum VaultType {
  AWS_SECRETS_MANAGER = 0;
  AWS_PARAMETER_STORE = 1;
}