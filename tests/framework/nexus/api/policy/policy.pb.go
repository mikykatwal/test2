// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: policy.proto

package policy

import (
	asset "go.mondoo.com/cnquery/motor/asset"
	platform "go.mondoo.com/cnquery/motor/platform"
	providers "go.mondoo.com/cnquery/motor/providers"
	api "go.mondoo.com/mondoo-operator/tests/framework/nexus/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScoreType int32

const (
	ScoreType_UNKNOWN  ScoreType = 0
	ScoreType_RESULT   ScoreType = 2
	ScoreType_ERROR    ScoreType = 4
	ScoreType_UNSCORED ScoreType = 16
)

// Enum value maps for ScoreType.
var (
	ScoreType_name = map[int32]string{
		0:  "UNKNOWN",
		2:  "RESULT",
		4:  "ERROR",
		16: "UNSCORED",
	}
	ScoreType_value = map[string]int32{
		"UNKNOWN":  0,
		"RESULT":   2,
		"ERROR":    4,
		"UNSCORED": 16,
	}
)

func (x ScoreType) Enum() *ScoreType {
	p := new(ScoreType)
	*p = x
	return p
}

func (x ScoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_proto_enumTypes[0].Descriptor()
}

func (ScoreType) Type() protoreflect.EnumType {
	return &file_policy_proto_enumTypes[0]
}

func (x ScoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScoreType.Descriptor instead.
func (ScoreType) EnumDescriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0}
}

type AssetOrderField int32

const (
	AssetOrderField_ORDER_ID           AssetOrderField = 0
	AssetOrderField_ORDER_NAME         AssetOrderField = 2
	AssetOrderField_ORDER_PLATFORM     AssetOrderField = 3
	AssetOrderField_ORDER_SCORE        AssetOrderField = 4
	AssetOrderField_ORDER_LAST_UPDATED AssetOrderField = 5
	AssetOrderField_ORDER_CREATED      AssetOrderField = 6
)

// Enum value maps for AssetOrderField.
var (
	AssetOrderField_name = map[int32]string{
		0: "ORDER_ID",
		2: "ORDER_NAME",
		3: "ORDER_PLATFORM",
		4: "ORDER_SCORE",
		5: "ORDER_LAST_UPDATED",
		6: "ORDER_CREATED",
	}
	AssetOrderField_value = map[string]int32{
		"ORDER_ID":           0,
		"ORDER_NAME":         2,
		"ORDER_PLATFORM":     3,
		"ORDER_SCORE":        4,
		"ORDER_LAST_UPDATED": 5,
		"ORDER_CREATED":      6,
	}
)

func (x AssetOrderField) Enum() *AssetOrderField {
	p := new(AssetOrderField)
	*p = x
	return p
}

func (x AssetOrderField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetOrderField) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_proto_enumTypes[1].Descriptor()
}

func (AssetOrderField) Type() protoreflect.EnumType {
	return &file_policy_proto_enumTypes[1]
}

func (x AssetOrderField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetOrderField.Descriptor instead.
func (AssetOrderField) EnumDescriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{1}
}

type Comparison int32

const (
	Comparison_GREATER_THAN Comparison = 0
	Comparison_LESS_THAN    Comparison = 1
)

// Enum value maps for Comparison.
var (
	Comparison_name = map[int32]string{
		0: "GREATER_THAN",
		1: "LESS_THAN",
	}
	Comparison_value = map[string]int32{
		"GREATER_THAN": 0,
		"LESS_THAN":    1,
	}
)

func (x Comparison) Enum() *Comparison {
	p := new(Comparison)
	*p = x
	return p
}

func (x Comparison) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Comparison) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_proto_enumTypes[2].Descriptor()
}

func (Comparison) Type() protoreflect.EnumType {
	return &file_policy_proto_enumTypes[2]
}

func (x Comparison) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Comparison.Descriptor instead.
func (Comparison) EnumDescriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{2}
}

type DateFilterField int32

const (
	DateFilterField_FILTER_LAST_UPDATED DateFilterField = 0
	DateFilterField_FILTER_CREATED      DateFilterField = 1
)

// Enum value maps for DateFilterField.
var (
	DateFilterField_name = map[int32]string{
		0: "FILTER_LAST_UPDATED",
		1: "FILTER_CREATED",
	}
	DateFilterField_value = map[string]int32{
		"FILTER_LAST_UPDATED": 0,
		"FILTER_CREATED":      1,
	}
)

func (x DateFilterField) Enum() *DateFilterField {
	p := new(DateFilterField)
	*p = x
	return p
}

func (x DateFilterField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateFilterField) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_proto_enumTypes[3].Descriptor()
}

func (DateFilterField) Type() protoreflect.EnumType {
	return &file_policy_proto_enumTypes[3]
}

func (x DateFilterField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateFilterField.Descriptor instead.
func (DateFilterField) EnumDescriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{3}
}

type AssetSearchFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     *api.PageRequest `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	OrderBy  *AssetOrder      `protobuf:"bytes,2,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	SpaceMrn string           `protobuf:"bytes,3,opt,name=space_mrn,json=spaceMrn,proto3" json:"space_mrn,omitempty"`
	// allows filtering by tag, name content etc.
	QueryTerms []string `protobuf:"bytes,20,rep,name=query_terms,json=queryTerms,proto3" json:"query_terms,omitempty"`
	AssetMrns  []string `protobuf:"bytes,21,rep,name=asset_mrns,json=assetMrns,proto3" json:"asset_mrns,omitempty"`
	// the query will use OR for slice requests
	PlatformIds []string      `protobuf:"bytes,22,rep,name=platform_ids,json=platformIds,proto3" json:"platform_ids,omitempty"`
	ScoreRange  []*ScoreRange `protobuf:"bytes,23,rep,name=score_range,json=scoreRange,proto3" json:"score_range,omitempty"`
	// search for specific project_id
	CicdProjectMrn string `protobuf:"bytes,24,opt,name=cicd_project_mrn,json=cicdProjectMrn,proto3" json:"cicd_project_mrn,omitempty"`
	// score type for the asset
	ScoreType ScoreType `protobuf:"varint,25,opt,name=score_type,json=scoreType,proto3,enum=mondoo.policy.ScoreType" json:"score_type,omitempty"`
	// filter based on contents of platformIDs
	PlatformIdPrefix string `protobuf:"bytes,26,opt,name=platform_id_prefix,json=platformIdPrefix,proto3" json:"platform_id_prefix,omitempty"`
	// return only assets of the specified kinds
	Kinds []string `protobuf:"bytes,27,rep,name=kinds,proto3" json:"kinds,omitempty"`
	// list of groups to filter by. Empty matches all
	// groups
	Groups            []*GroupFilter `protobuf:"bytes,28,rep,name=groups,proto3" json:"groups,omitempty"`
	RelatedToAssetMrn string         `protobuf:"bytes,29,opt,name=related_to_asset_mrn,json=relatedToAssetMrn,proto3" json:"related_to_asset_mrn,omitempty"`
	AssetTypes        []string       `protobuf:"bytes,30,rep,name=asset_types,json=assetTypes,proto3" json:"asset_types,omitempty"`
}

func (x *AssetSearchFilter) Reset() {
	*x = AssetSearchFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetSearchFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetSearchFilter) ProtoMessage() {}

func (x *AssetSearchFilter) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetSearchFilter.ProtoReflect.Descriptor instead.
func (*AssetSearchFilter) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0}
}

func (x *AssetSearchFilter) GetPage() *api.PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *AssetSearchFilter) GetOrderBy() *AssetOrder {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *AssetSearchFilter) GetSpaceMrn() string {
	if x != nil {
		return x.SpaceMrn
	}
	return ""
}

func (x *AssetSearchFilter) GetQueryTerms() []string {
	if x != nil {
		return x.QueryTerms
	}
	return nil
}

func (x *AssetSearchFilter) GetAssetMrns() []string {
	if x != nil {
		return x.AssetMrns
	}
	return nil
}

func (x *AssetSearchFilter) GetPlatformIds() []string {
	if x != nil {
		return x.PlatformIds
	}
	return nil
}

func (x *AssetSearchFilter) GetScoreRange() []*ScoreRange {
	if x != nil {
		return x.ScoreRange
	}
	return nil
}

func (x *AssetSearchFilter) GetCicdProjectMrn() string {
	if x != nil {
		return x.CicdProjectMrn
	}
	return ""
}

func (x *AssetSearchFilter) GetScoreType() ScoreType {
	if x != nil {
		return x.ScoreType
	}
	return ScoreType_UNKNOWN
}

func (x *AssetSearchFilter) GetPlatformIdPrefix() string {
	if x != nil {
		return x.PlatformIdPrefix
	}
	return ""
}

func (x *AssetSearchFilter) GetKinds() []string {
	if x != nil {
		return x.Kinds
	}
	return nil
}

func (x *AssetSearchFilter) GetGroups() []*GroupFilter {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *AssetSearchFilter) GetRelatedToAssetMrn() string {
	if x != nil {
		return x.RelatedToAssetMrn
	}
	return ""
}

func (x *AssetSearchFilter) GetAssetTypes() []string {
	if x != nil {
		return x.AssetTypes
	}
	return nil
}

type GroupFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	// TODO: how do we define asset types
	AssetTypes []string `protobuf:"bytes,2,rep,name=assetTypes,proto3" json:"assetTypes,omitempty"`
}

func (x *GroupFilter) Reset() {
	*x = GroupFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupFilter) ProtoMessage() {}

func (x *GroupFilter) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupFilter.ProtoReflect.Descriptor instead.
func (*GroupFilter) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{1}
}

func (x *GroupFilter) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *GroupFilter) GetAssetTypes() []string {
	if x != nil {
		return x.AssetTypes
	}
	return nil
}

type ScoreRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Begin uint32 `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   uint32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ScoreRange) Reset() {
	*x = ScoreRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreRange) ProtoMessage() {}

func (x *ScoreRange) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreRange.ProtoReflect.Descriptor instead.
func (*ScoreRange) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{2}
}

func (x *ScoreRange) GetBegin() uint32 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *ScoreRange) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

type AssetOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction api.OrderDirection `protobuf:"varint,1,opt,name=direction,proto3,enum=mondoo.captain.v1.OrderDirection" json:"direction,omitempty"`
	Field     AssetOrderField    `protobuf:"varint,2,opt,name=field,proto3,enum=mondoo.policy.AssetOrderField" json:"field,omitempty"`
}

func (x *AssetOrder) Reset() {
	*x = AssetOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetOrder) ProtoMessage() {}

func (x *AssetOrder) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetOrder.ProtoReflect.Descriptor instead.
func (*AssetOrder) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{3}
}

func (x *AssetOrder) GetDirection() api.OrderDirection {
	if x != nil {
		return x.Direction
	}
	return api.OrderDirection(0)
}

func (x *AssetOrder) GetField() AssetOrderField {
	if x != nil {
		return x.Field
	}
	return AssetOrderField_ORDER_ID
}

type AssetsPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *api.PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	List []*Asset      `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AssetsPage) Reset() {
	*x = AssetsPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetsPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetsPage) ProtoMessage() {}

func (x *AssetsPage) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetsPage.ProtoReflect.Descriptor instead.
func (*AssetsPage) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{4}
}

func (x *AssetsPage) GetPage() *api.PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *AssetsPage) GetList() []*Asset {
	if x != nil {
		return x.List
	}
	return nil
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mrn   string `protobuf:"bytes,1,opt,name=mrn,proto3" json:"mrn,omitempty"`
	Space string `protobuf:"bytes,2,opt,name=space,proto3" json:"space,omitempty"`
	Name  string `protobuf:"bytes,18,opt,name=name,proto3" json:"name,omitempty"`
	// labels added by mondoo
	Labels      map[string]string `protobuf:"bytes,19,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PlatformIds []string          `protobuf:"bytes,20,rep,name=platform_ids,json=platformIds,proto3" json:"platform_ids,omitempty"`
	UpdatedAt   string            `protobuf:"bytes,21,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// asset state
	State asset.State `protobuf:"varint,22,opt,name=state,proto3,enum=cnquery.motor.asset.v1.State" json:"state,omitempty"`
	// asset platform
	// FIXME: remove in v8.0 vv
	Platform *platform.Platform `protobuf:"bytes,23,opt,name=platform,proto3" json:"platform,omitempty"`
	// annotations are user-added, editable
	Annotations    map[string]string   `protobuf:"bytes,24,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Category       asset.AssetCategory `protobuf:"varint,25,opt,name=category,proto3,enum=cnquery.motor.asset.v1.AssetCategory" json:"category,omitempty"`
	Id             int64               `protobuf:"varint,27,opt,name=id,proto3" json:"id,omitempty"`
	CicdProjectMrn string              `protobuf:"bytes,26,opt,name=cicd_project_mrn,json=cicdProjectMrn,proto3" json:"cicd_project_mrn,omitempty"` // if the asset is a cicd asset the project is the owner
	AssetType      string              `protobuf:"bytes,28,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`
	// Platform IDs
	Ids []string `protobuf:"bytes,30,rep,name=ids,proto3" json:"ids,omitempty"`
	// Platform Name
	PlatformName string `protobuf:"bytes,31,opt,name=platformName,proto3" json:"platformName,omitempty"`
	// Platform Title
	Title string `protobuf:"bytes,32,opt,name=title,proto3" json:"title,omitempty"`
	// Platform Architecture
	Arch string `protobuf:"bytes,33,opt,name=arch,proto3" json:"arch,omitempty"`
	// Platform families
	Family []string `protobuf:"bytes,34,rep,name=family,proto3" json:"family,omitempty"`
	// Platform build
	Build string `protobuf:"bytes,35,opt,name=build,proto3" json:"build,omitempty"`
	// Platform version
	Version string `protobuf:"bytes,36,opt,name=version,proto3" json:"version,omitempty"`
	// Platform Kind
	Kind providers.Kind `protobuf:"varint,37,opt,name=kind,proto3,enum=cnquery.motor.providers.v1.Kind" json:"kind,omitempty"`
	// Platform Runtime
	Runtime string `protobuf:"bytes,38,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// Asset FQDN, when present
	Fqdn string `protobuf:"bytes,39,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	// ManagedBy for clients to "claim" responsibility for asset
	ManagedBy string `protobuf:"bytes,40,opt,name=managed_by,json=managedBy,proto3" json:"managed_by,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{5}
}

func (x *Asset) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *Asset) GetSpace() string {
	if x != nil {
		return x.Space
	}
	return ""
}

func (x *Asset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Asset) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Asset) GetPlatformIds() []string {
	if x != nil {
		return x.PlatformIds
	}
	return nil
}

func (x *Asset) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Asset) GetState() asset.State {
	if x != nil {
		return x.State
	}
	return asset.State(0)
}

func (x *Asset) GetPlatform() *platform.Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *Asset) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Asset) GetCategory() asset.AssetCategory {
	if x != nil {
		return x.Category
	}
	return asset.AssetCategory(0)
}

func (x *Asset) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Asset) GetCicdProjectMrn() string {
	if x != nil {
		return x.CicdProjectMrn
	}
	return ""
}

func (x *Asset) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *Asset) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *Asset) GetPlatformName() string {
	if x != nil {
		return x.PlatformName
	}
	return ""
}

func (x *Asset) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Asset) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Asset) GetFamily() []string {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *Asset) GetBuild() string {
	if x != nil {
		return x.Build
	}
	return ""
}

func (x *Asset) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Asset) GetKind() providers.Kind {
	if x != nil {
		return x.Kind
	}
	return providers.Kind(0)
}

func (x *Asset) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *Asset) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *Asset) GetManagedBy() string {
	if x != nil {
		return x.ManagedBy
	}
	return ""
}

type DeleteAssetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceMrn        string      `protobuf:"bytes,1,opt,name=spaceMrn,proto3" json:"spaceMrn,omitempty"`
	AssetMrns       []string    `protobuf:"bytes,2,rep,name=asset_mrns,json=assetMrns,proto3" json:"asset_mrns,omitempty"`
	DeleteAll       bool        `protobuf:"varint,3,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"` // if you want to delete all assets in the space
	DateFilter      *DateFilter `protobuf:"bytes,4,opt,name=date_filter,json=dateFilter,proto3" json:"date_filter,omitempty"`
	ManagedBy       string      `protobuf:"bytes,5,opt,name=managed_by,json=managedBy,proto3" json:"managed_by,omitempty"`
	PlatformRuntime string      `protobuf:"bytes,6,opt,name=platform_runtime,json=platformRuntime,proto3" json:"platform_runtime,omitempty"`
}

func (x *DeleteAssetsRequest) Reset() {
	*x = DeleteAssetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAssetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssetsRequest) ProtoMessage() {}

func (x *DeleteAssetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssetsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAssetsRequest) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteAssetsRequest) GetSpaceMrn() string {
	if x != nil {
		return x.SpaceMrn
	}
	return ""
}

func (x *DeleteAssetsRequest) GetAssetMrns() []string {
	if x != nil {
		return x.AssetMrns
	}
	return nil
}

func (x *DeleteAssetsRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteAssetsRequest) GetDateFilter() *DateFilter {
	if x != nil {
		return x.DateFilter
	}
	return nil
}

func (x *DeleteAssetsRequest) GetManagedBy() string {
	if x != nil {
		return x.ManagedBy
	}
	return ""
}

func (x *DeleteAssetsRequest) GetPlatformRuntime() string {
	if x != nil {
		return x.PlatformRuntime
	}
	return ""
}

type DateFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  string          `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // RFC3339
	Comparison Comparison      `protobuf:"varint,2,opt,name=comparison,proto3,enum=mondoo.policy.Comparison" json:"comparison,omitempty"`
	Field      DateFilterField `protobuf:"varint,3,opt,name=field,proto3,enum=mondoo.policy.DateFilterField" json:"field,omitempty"`
}

func (x *DateFilter) Reset() {
	*x = DateFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateFilter) ProtoMessage() {}

func (x *DateFilter) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateFilter.ProtoReflect.Descriptor instead.
func (*DateFilter) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{7}
}

func (x *DateFilter) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *DateFilter) GetComparison() Comparison {
	if x != nil {
		return x.Comparison
	}
	return Comparison_GREATER_THAN
}

func (x *DateFilter) GetField() DateFilterField {
	if x != nil {
		return x.Field
	}
	return DateFilterField_FILTER_LAST_UPDATED
}

type DeleteAssetsConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetMrns []string          `protobuf:"bytes,1,rep,name=asset_mrns,json=assetMrns,proto3" json:"asset_mrns,omitempty"`
	Errors    map[string]string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeleteAssetsConfirmation) Reset() {
	*x = DeleteAssetsConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAssetsConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssetsConfirmation) ProtoMessage() {}

func (x *DeleteAssetsConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssetsConfirmation.ProtoReflect.Descriptor instead.
func (*DeleteAssetsConfirmation) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteAssetsConfirmation) GetAssetMrns() []string {
	if x != nil {
		return x.AssetMrns
	}
	return nil
}

func (x *DeleteAssetsConfirmation) GetErrors() map[string]string {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_policy_proto protoreflect.FileDescriptor

var file_policy_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x10, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x2f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x04, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f,
	0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4d, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d,
	0x72, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x4d, 0x72, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x69, 0x63, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x69, 0x63, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x72, 0x6e, 0x12, 0x37, 0x0a,
	0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x1b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6e,
	0x64, 0x6f, 0x6f, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2f,
	0x0a, 0x14, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x6d, 0x72, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x72, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x22, 0x43, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x0a,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e,
	0x64, 0x6f, 0x6f, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x22, 0x67, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xbf, 0x07, 0x0a, 0x05, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x47, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63,
	0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x69, 0x63, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x72,
	0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x69, 0x63, 0x64, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x18, 0x22, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63,
	0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x71,
	0x64, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x42,
	0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf5, 0x01, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x72, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x72, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x72, 0x6e, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x3a,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x42, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6f,
	0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x72, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x72, 0x6e, 0x73, 0x12, 0x4b,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x3d, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x44, 0x10, 0x10, 0x2a, 0x7f, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x2d, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x48, 0x41, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x10, 0x01, 0x2a, 0x3e, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x32, 0xb6, 0x01, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x1a, 0x19, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x5d, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12,
	0x22, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x42, 0x27,
	0x5a, 0x25, 0x67, 0x6f, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2f, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_policy_proto_rawDescOnce sync.Once
	file_policy_proto_rawDescData = file_policy_proto_rawDesc
)

func file_policy_proto_rawDescGZIP() []byte {
	file_policy_proto_rawDescOnce.Do(func() {
		file_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_policy_proto_rawDescData)
	})
	return file_policy_proto_rawDescData
}

var file_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_policy_proto_goTypes = []interface{}{
	(ScoreType)(0),                   // 0: mondoo.policy.ScoreType
	(AssetOrderField)(0),             // 1: mondoo.policy.AssetOrderField
	(Comparison)(0),                  // 2: mondoo.policy.Comparison
	(DateFilterField)(0),             // 3: mondoo.policy.DateFilterField
	(*AssetSearchFilter)(nil),        // 4: mondoo.policy.AssetSearchFilter
	(*GroupFilter)(nil),              // 5: mondoo.policy.GroupFilter
	(*ScoreRange)(nil),               // 6: mondoo.policy.ScoreRange
	(*AssetOrder)(nil),               // 7: mondoo.policy.AssetOrder
	(*AssetsPage)(nil),               // 8: mondoo.policy.AssetsPage
	(*Asset)(nil),                    // 9: mondoo.policy.Asset
	(*DeleteAssetsRequest)(nil),      // 10: mondoo.policy.DeleteAssetsRequest
	(*DateFilter)(nil),               // 11: mondoo.policy.DateFilter
	(*DeleteAssetsConfirmation)(nil), // 12: mondoo.policy.DeleteAssetsConfirmation
	nil,                              // 13: mondoo.policy.Asset.LabelsEntry
	nil,                              // 14: mondoo.policy.Asset.AnnotationsEntry
	nil,                              // 15: mondoo.policy.DeleteAssetsConfirmation.ErrorsEntry
	(*api.PageRequest)(nil),          // 16: mondoo.captain.v1.PageRequest
	(api.OrderDirection)(0),          // 17: mondoo.captain.v1.OrderDirection
	(*api.PageInfo)(nil),             // 18: mondoo.captain.v1.PageInfo
	(asset.State)(0),                 // 19: cnquery.motor.asset.v1.State
	(*platform.Platform)(nil),        // 20: cnquery.motor.platform.v1.Platform
	(asset.AssetCategory)(0),         // 21: cnquery.motor.asset.v1.AssetCategory
	(providers.Kind)(0),              // 22: cnquery.motor.providers.v1.Kind
}
var file_policy_proto_depIdxs = []int32{
	16, // 0: mondoo.policy.AssetSearchFilter.page:type_name -> mondoo.captain.v1.PageRequest
	7,  // 1: mondoo.policy.AssetSearchFilter.order_by:type_name -> mondoo.policy.AssetOrder
	6,  // 2: mondoo.policy.AssetSearchFilter.score_range:type_name -> mondoo.policy.ScoreRange
	0,  // 3: mondoo.policy.AssetSearchFilter.score_type:type_name -> mondoo.policy.ScoreType
	5,  // 4: mondoo.policy.AssetSearchFilter.groups:type_name -> mondoo.policy.GroupFilter
	17, // 5: mondoo.policy.AssetOrder.direction:type_name -> mondoo.captain.v1.OrderDirection
	1,  // 6: mondoo.policy.AssetOrder.field:type_name -> mondoo.policy.AssetOrderField
	18, // 7: mondoo.policy.AssetsPage.page:type_name -> mondoo.captain.v1.PageInfo
	9,  // 8: mondoo.policy.AssetsPage.list:type_name -> mondoo.policy.Asset
	13, // 9: mondoo.policy.Asset.labels:type_name -> mondoo.policy.Asset.LabelsEntry
	19, // 10: mondoo.policy.Asset.state:type_name -> cnquery.motor.asset.v1.State
	20, // 11: mondoo.policy.Asset.platform:type_name -> cnquery.motor.platform.v1.Platform
	14, // 12: mondoo.policy.Asset.annotations:type_name -> mondoo.policy.Asset.AnnotationsEntry
	21, // 13: mondoo.policy.Asset.category:type_name -> cnquery.motor.asset.v1.AssetCategory
	22, // 14: mondoo.policy.Asset.kind:type_name -> cnquery.motor.providers.v1.Kind
	11, // 15: mondoo.policy.DeleteAssetsRequest.date_filter:type_name -> mondoo.policy.DateFilter
	2,  // 16: mondoo.policy.DateFilter.comparison:type_name -> mondoo.policy.Comparison
	3,  // 17: mondoo.policy.DateFilter.field:type_name -> mondoo.policy.DateFilterField
	15, // 18: mondoo.policy.DeleteAssetsConfirmation.errors:type_name -> mondoo.policy.DeleteAssetsConfirmation.ErrorsEntry
	4,  // 19: mondoo.policy.AssetStore.ListAssets:input_type -> mondoo.policy.AssetSearchFilter
	10, // 20: mondoo.policy.AssetStore.DeleteAssets:input_type -> mondoo.policy.DeleteAssetsRequest
	8,  // 21: mondoo.policy.AssetStore.ListAssets:output_type -> mondoo.policy.AssetsPage
	12, // 22: mondoo.policy.AssetStore.DeleteAssets:output_type -> mondoo.policy.DeleteAssetsConfirmation
	21, // [21:23] is the sub-list for method output_type
	19, // [19:21] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_policy_proto_init() }
func file_policy_proto_init() {
	if File_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetSearchFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetsPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAssetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAssetsConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_policy_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_policy_proto_goTypes,
		DependencyIndexes: file_policy_proto_depIdxs,
		EnumInfos:         file_policy_proto_enumTypes,
		MessageInfos:      file_policy_proto_msgTypes,
	}.Build()
	File_policy_proto = out.File
	file_policy_proto_rawDesc = nil
	file_policy_proto_goTypes = nil
	file_policy_proto_depIdxs = nil
}
